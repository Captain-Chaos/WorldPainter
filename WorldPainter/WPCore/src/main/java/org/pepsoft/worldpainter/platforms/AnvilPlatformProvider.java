package org.pepsoft.worldpainter.platforms;

import org.jnbt.CompoundTag;
import org.jnbt.IntTag;
import org.jnbt.Tag;
import org.pepsoft.minecraft.*;
import org.pepsoft.worldpainter.Platform;

import java.awt.*;
import java.io.File;
import java.util.Map;
import java.util.regex.Pattern;

import static org.pepsoft.minecraft.Constants.*;
import static org.pepsoft.minecraft.DataType.REGION;

public abstract class AnvilPlatformProvider extends JavaPlatformProvider {
    protected AnvilPlatformProvider(String version, Platform platform) {
        super(version, platform);
    }

    @SuppressWarnings({"unchecked", "rawtypes"}) // Work around strict generics; responsibility of caller
    @Override
    public final NBTChunk createChunk(Platform platform, Map<DataType, Tag> tags, int maxHeight, boolean readOnly) {
        ensurePlatformSupported(platform);
        // MC12AnvilChunk.toNBT() forgets to set the DataVersion, so if it's missing, conclude it's a chunk generated by that class
        final Tag dataVersionTag = ((CompoundTag) tags.get(REGION)).getTag(TAG_DATA_VERSION);
        if (dataVersionTag == null) {
            return new MC12AnvilChunk((CompoundTag) tags.get(REGION), maxHeight, readOnly);
        } else {
            final int dataVersion = ((IntTag) dataVersionTag).getValue();
            if (dataVersion <= DATA_VERSION_MC_1_12_2) {
                return new MC12AnvilChunk((CompoundTag) tags.get(REGION), maxHeight, readOnly);
            } else if (dataVersion <= DATA_VERSION_MC_1_17_1) {
                return new MC115AnvilChunk((CompoundTag) tags.get(REGION), maxHeight, readOnly);
            } else {
                return new MC118AnvilChunk((Map) tags, maxHeight, readOnly);
            }
        }
    }

    @Override
    public File[] getRegionFiles(Platform platform, File regionDir, DataType dataType) {
        ensurePlatformSupported(platform);
        return getRegionDir(regionDir.getParentFile(), dataType).listFiles((dir, name) -> REGION_FILE_PATTERN.matcher(name).matches());
    }

    @Override
    protected File getRegionFileFile(Platform platform, File regionDir, DataType dataType, Point coords) {
        ensurePlatformSupported(platform);
        return new File(getRegionDir(regionDir.getParentFile(), dataType), "r." + coords.x + "." + coords.y + ".mca");
    }

    private File getRegionDir(File baseDir, DataType dataType) {
        switch (dataType) {
            case REGION:
            case ENTITIES:
            case POI:
                return new File(baseDir, dataType.name().toLowerCase());
            default:
                throw new InternalError();
        }
    }

    private static final Pattern REGION_FILE_PATTERN = Pattern.compile("r\\.-?\\d+\\.-?\\d+\\.mca");
}