package org.pepsoft.worldpainter.importing;

import org.pepsoft.minecraft.Material;
import org.pepsoft.util.ProgressReceiver;
import org.pepsoft.worldpainter.World2;
import org.pepsoft.worldpainter.layers.ReadOnly;

import java.io.IOException;

/**
 * An importer of maps to WorldPainter {@link World2 worlds}.
 */
public abstract class MapImporter {
    /**
     * Import the map, returning it as a {@link World2} object. The default implementation delegates to
     * {@link #doImport(ProgressReceiver)} without specifying a progress receiver.
     *
     * @return The imported map as a {@code World2} object.
     * @throws IOException If an I/O error occurred importing the map.
     */
    public World2 doImport() throws IOException {
        try {
            return doImport(null);
        } catch (ProgressReceiver.OperationCancelled e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Import the map (optionally reporting progress to the specified progress receiver) and returning it as a
     * {@link World2} object.
     *
     * @param progressReceiver The progress receiver to which to report progress. May be {@code null}, indicating that
     *                         no progress need be reported.
     * @return The imported map as a {@code World2} object.
     * @throws IOException If an I/O error occurred importing the map.
     * @throws ProgressReceiver.OperationCancelled If the progress receiver threw an
     * {@link ProgressReceiver.OperationCancelled} exception.
     */
    public abstract World2 doImport(ProgressReceiver progressReceiver) throws IOException, ProgressReceiver.OperationCancelled;

    /**
     * Get the warnings generated by the import, or {@code null} if there were none. Multiple warnings should be on
     * separate lines separated by line separators ({@code \n}).
     *
     * @return The warnings generated by the import, or {@code null} if there were none.
     */
    public abstract String getWarnings();

    /**
     * An indication of how the {@link ReadOnly} layer should be applied to the imported world.
     */
    public enum ReadOnlyOption {
        /**
         * The {@link ReadOnly} layer should <em>not</em> be applied to the imported world.
         */
        NONE,

        /**
         * The {@link ReadOnly} layer should be applied to every chunk that contains at least one man-made block (a
         * block that would have been placed by a player). The definition of "man-made" is up to the platform provider,
         * but one option, used by the default platforms supported by WorldPainter, is to look at the
         * {@link Material#natural} property.
         */
        MAN_MADE,

        /**
         * The {@link ReadOnly} layer should be applied to every chunk that contains at least one
         * <strong>above-ground</strong> man-made block (a block that would have been placed by a player). The
         * definition of "man-made" is up to the platform provider, but one option, used by the default platforms
         * supported by WorldPainter, is to look at the {@link Material#natural} property. "Above ground" means any
         * block above the level that will become the terrain height in the WorldPainter world.
         */
        MAN_MADE_ABOVE_GROUND,

        /**
         * The {@link ReadOnly} layer should be applied all chunks.
         */
        ALL
    }
}